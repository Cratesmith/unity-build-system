// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEditor;
using UnityEngine;

namespace UBS
{
	public class UBSBuildWindow : EditorWindow
	{

		[NonSerialized]
		UBSProcess mProcess;

		[NonSerialized]
		bool mInit;

		[NonSerialized]
		bool mEmpty = false;

		public static void Init(BuildCollection pData)
		{
			var window = EditorWindow.GetWindow<UBSBuildWindow>("Build",true);

			window.position = new Rect(50,50, 300,300);
			window.minSize = new Vector2(300,300);
			window.Run(pData);
		}


		public void Run(BuildCollection pCollection)
		{
			UBSProcess.Create(pCollection);
		}

		void Initialize()
		{
			mProcess = UBSProcess.LoadUBSProcess();
			if(mProcess == null)
			{
				mEmpty = true;
				mInit = true;
			}else
			{
				EditorApplication.update -= OnUpdate;
				EditorApplication.update += OnUpdate;
			}
		}

		void OnUpdate()
		{
			//Debug.Log("Update");

			if(mProcess == null)
			{
				EditorApplication.update -= OnUpdate;
				mEmpty = true;
			}


			try
			{
				mProcess.MoveNext();
			}catch (Exception e)
			{
				Debug.LogException(e);
				EditorApplication.update -= OnUpdate;
				return;
			}

			Repaint();
		}
		void OnDestroy()
		{
			EditorApplication.update -= OnUpdate;
		}
		void OnDisable()
		{
			EditorApplication.update -= OnUpdate;
		}
		void OnGUI()
		{


			if(!mInit)
			{
				Initialize();
			}

			if(mEmpty)
			{
				// still no process existing?
				GUILayout.Label("Nothing to build", Styles.bigHint );
				return;
			}




			GUILayout.BeginVertical("HelpBox");
			{
				KeyValue( "Collection:", mProcess.BuildCollection.name );

				KeyValue( "CurrentProcess: ", mProcess.CurrentProcessName );

				KeyValue( "CurrentState: ", mProcess.CurrentState );
				
				KeyProgress( "Pre Steps Progress: ", mProcess.SubPreWalker.Progress );
				KeyValue( "Pre Step Current: ", mProcess.SubPreWalker.Step );
				KeyProgress( "Post Steps Progress: ", mProcess.SubPostWalker.Progress );
				KeyValue( "Post Step Current: ", mProcess.SubPostWalker.Step );


				KeyProgress( "Progress: ", mProcess.Progress );

			}
			GUILayout.EndVertical();

		}


		void KeyValue(string pKey, object pValue)
		{
			GUILayout.BeginHorizontal();
			{
				GUILayout.Label(pKey, Styles.boldKey, GUILayout.Width(120));
				GUILayout.Label(pValue.ToString(), Styles.normalValue, GUILayout.Width(180));
			}
			GUILayout.EndHorizontal();
		}


		void KeyProgress(string pKey, float pValue)
		{
			GUILayout.BeginHorizontal();
			{
				GUILayout.Label(pKey, Styles.boldKey, GUILayout.Width(120));
				GUILayout.Label(Mathf.RoundToInt(pValue * 100).ToString() + "%", Styles.progressBar, GUILayout.Width(160 * pValue), GUILayout.Height(18));
				GUILayout.FlexibleSpace();
			}
			GUILayout.EndHorizontal();
		}

	}
}

